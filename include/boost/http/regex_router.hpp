/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef BOOST_HTTP_REGEX_ROUTER_H
#define BOOST_HTTP_REGEX_ROUTER_H

#include <vector>
#include <regex>
#include <functional>

namespace boost {
namespace http {

template<class RouteContext>
class regex_router
{
public:
    typedef RouteContext conext_type;

    typedef std::pair<std::regex, std::function<void(conext_type)>> route_type;
    typedef std::vector<route_type> route_vector_type;

    typename route_vector_type::iterator begin()
    {
        return route_vector.begin();
    }

    typename route_vector_type::iterator end()
    {
        return route_vector.end();
    }

    typename route_vector_type::iterator
    insert(typename route_vector_type::iterator pos, route_type route)
    {
        return route_vector.insert(pos, std::move(route));
    }

    typename route_vector_type::iterator
    insert(typename route_vector_type::iterator pos,
           std::regex route, std::function<void(conext_type)> handler)
    {
        insert(pos, std::make_pair(std::move(route), std::move(handler)));
    }

    void push_back(route_type route)
    {
        route_vector.push_back(std::move(route));
    }

    void push_back(std::regex route, std::function<void(conext_type)> handler)
    {
        push_back(std::make_pair(std::move(route), std::move(handler)));
    }

    bool operator()(const ::std::string& path, RouteContext context)
    {
        for(auto& it : route_vector)
        {
            if (std::regex_match(path, it.first))
            {
                it.second(context);
                return true;
            }
        }
        return false;
    }

private:
    route_vector_type route_vector;
};

} // namespace http
} // namespace boost

#endif // BOOST_HTTP_REGEX_ROUTER_H
