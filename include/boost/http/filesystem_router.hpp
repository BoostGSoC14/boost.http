/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef BOOST_HTTP_FILESYSTEM_ROUTER_H
#define BOOST_HTTP_FILESYSTEM_ROUTER_H

#include <vector>
#include <functional>

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>

namespace boost {
namespace http {

template<class route_function_type, typename... arguments>
class filesystem_router
{
private:
    ::boost::filesystem::path root_;
    route_function_type route_;

public:
    filesystem_router(::boost::filesystem::path root,
                      std::initializer_list<route_function_type> l):
        std::vector<route_function_type>(l),
        root_(root)
    {}

    filesystem_router(const filesystem_router&) = default;
    filesystem_router(filesystem_router&&) = default;

    bool operator()(const ::std::string& path, arguments... params)
    {
        auto p = root_;
        p += path;

        if (::boost::filesystem::exists(p))
        {
            route_(params...);
            return true;
        }

        return false;
    }
};

} // namespace http
} // namespace boost

#endif // BOOST_HTTP_FILESYSTEM_ROUTER_H
