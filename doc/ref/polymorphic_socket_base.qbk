[section:polymorphic_socket_base polymorphic_socket_base]

 #include <boost/http/polymorphic_socket_base.hpp>

=polymorphic_socket_base= is the base class for all classes in the hierarchy
defined for runtime-based polymorphic HTTP producers. It is an abstract class
that only contains functionality useful for simultaneously both channel ends
(client and server).

References for objects of this class are expected to fulfill the [link
reference.socket_concept [^Socket] concept].

This class has no state to ease multiple inheritance and it is inherited by
[^[link reference.polymorphic_server_socket polymorphic_server_socket]].

The design for the hierarchy started with this class was a little inspired by
/C++'s iostream/ and
[@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3525.pdf N3525:
Polymorphic Allocators].

[section Member types]

These are the types chosen /set in stone/ to guarantee ABI stability across
binaries (including possible plugins).

[variablelist

[[`typedef message message_type`] [The default message type is a great candidate
to be chosen as a baseline. It makes use of the familiar `std::string` and
`std::vector` types and for the `headers_type`, it makes use of a space saving
container, `boost::container::flat_multimap`.]]

[[`typedef std::function<void(boost::system::error_code)> callback_type`] [It is
so standard that is the only of its kind living in the standard library. It's
flexible enough to type erase any other handler. Needless to say more.]]

]

[endsect]

[section Member functions]

[section Overwritable functions]

These are the functions that subclasses need to implement in order to lose the
=abstract class= property.

[variablelist

[[`virtual asio::io_service& get_io_service() = 0`]
 [This function presents no differences (besides mandatory virtual) from the one
  with the same name found on the [link reference.socket_concept [^Socket]
  concept].]]
[[`virtual read_state read_state() const = 0`]
 [This function presents no differences (besides mandatory virtual) from the one
  with the same name found on the [link reference.socket_concept [^Socket]
  concept].]]
[[`virtual write_state write_state() const = 0`]
 [This function presents no differences (besides mandatory virtual) from the one
  with the same name found on the [link reference.socket_concept [^Socket]
  concept].]]
[[`virtual void async_read_some(message_type &message,
   callback_type handler) = 0`]
 [The only difference between this function (besides mandatory virtual) and the
  one with the same name found on the [link reference.socket_concept [^Socket]
  concept] is the lack of support for completion tokens and the use of a type
  erased handler instead.]]
[[`virtual void async_read_trailers(message_type &message,
   callback_type handler) = 0`]
 [The only difference between this function (besides mandatory virtual) and the
  one with the same name found on the [link reference.socket_concept [^Socket]
  concept] is the lack of support for completion tokens and the use of a type
  erased handler instead.]]
[[`virtual void async_write(const message_type &message,
   callback_type handler) = 0`]
 [The only difference between this function (besides mandatory virtual) and the
  one with the same name found on the [link reference.socket_concept [^Socket]
  concept] is the lack of support for completion tokens and the use of a type
  erased handler instead.]]
[[`virtual void async_write_trailers(const message_type &message,
    callback_type handler) = 0`]
 [The only difference between this function (besides mandatory virtual) and the
  one with the same name found on the [link reference.socket_concept [^Socket]
  concept] is the lack of support for completion tokens and the use of a type
  erased handler instead.]]
[[`virtual void async_write_end_of_message(callback_type handler) = 0`]
 [The only difference between this function (besides mandatory virtual) and the
  one with the same name found on the [link reference.socket_concept [^Socket]
  concept] is the lack of support for completion tokens and the use of a type
  erased handler instead.]]
[[`virtual ~polymorphic_socket_base() = 0`]
 [Destructor. Inline definition done with `= default`.]]

]

[endsect]

[section Wrappers to fulfill the ASIO extensible model]

These functions rewrite usual function calls in terms of the ABI stable
interface. They also enable the ASIO extensible model within this hierarchy.

[variablelist

[[`template<class CompletionToken>
   typename boost::asio::async_result<
       typename boost::asio::handler_type<CompletionToken,
                                   void(boost::system::error_code)>::type>::type
   async_read_some(message_type &message, CompletionToken &&token)`]
 [Handle the token and dispatch the operation to the ABI stable
  `async_read_some`.]]

[[`template<class CompletionToken>
   typename boost::asio::async_result<
       typename boost::asio::handler_type<CompletionToken,
                                   void(boost::system::error_code)>::type>::type
   async_read_trailers(message_type &message, CompletionToken &&token)`]
 [Handle the token and dispatch the operation to the ABI stable
  `async_read_trailers`.]]

[[`template<class CompletionToken>
   typename boost::asio::async_result<
       typename boost::asio::handler_type<CompletionToken,
                                   void(boost::system::error_code)>::type>::type
   async_write(const message_type &message, CompletionToken &&token)`]
 [Handle the token and dispatch the operation to the ABI stable
  `async_write`.]]

[[`template<class CompletionToken>
   typename boost::asio::async_result<
       typename boost::asio::handler_type<CompletionToken,
                                   void(boost::system::error_code)>::type>::type
   async_write_trailers(const message_type &message, CompletionToken &&token)`]
 [Handle the token and dispatch the operation to the ABI stable
  `async_write_trailers`.]]

[[`template<class CompletionToken>
   typename boost::asio::async_result<
       typename boost::asio::handler_type<CompletionToken,
                                   void(boost::system::error_code)>::type>::type
   async_write_end_of_message(CompletionToken &&token)`]
 [Handle the token and dispatch the operation to the ABI stable
  `async_write_end_of_message`.]]

]

[endsect]

[endsect]

[endsect]
