[section:header_value_for_each header_value_for_each]

 #include <boost/http/algorithm/header.hpp>

\u0020

 template<class StringRef, class F>
 F header_value_for_each(const StringRef &header_value, F f)

Apply /f/ for each element from the comma-separated list defined by the
/header_value/ HTTP field value.

[note This algorithm is liberal in what it accepts and it will skip invalid
 elements. An invalid element is a sequence, possibly empty, containing no other
 character than optional white space (i.e. `'\x20'` or `'\t'`).]

[section Template parameters]

[variablelist

[[`StringRef`][It MUST fulfill the requirements of the `StringRef` concept
 (i.e. `boost::basic_string_ref`).]]

[[`F`][A type whose instances are callable and have the following signature:

 ``
 void(StringRef)
 ``]]

]

[endsect]

[section Parameters]

[variablelist

[[`const StringRef &header_value`][The HTTP field value.]]

[[`F f`][The functor that will be called for the elements found on the
 comma-separated list.

 Optional white space (only at the beginning and at the end) is trimmed before
 applying the element to /f/.]]

]

[endsect]

[section Return value]

 std::move(f)

[endsect]

[endsect]
