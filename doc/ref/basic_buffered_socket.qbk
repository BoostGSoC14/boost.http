[section:basic_buffered_socket basic_buffered_socket]

 #include <boost/http/buffered_socket.hpp>

This template can be used to easily define classes fulfilling the strict [link
reference.server_socket_concept [^ServerSocket] concept]. These classes exposes
the =HTTP/1.1= wire format (i.e. a builtin/standalone HTTP server) into an
easy-to-use API.

The underlying I/O object is expected to have the following properties:

* It is stream-oriented (i.e. no message boundaries; read or write operations
  may transfer fewer bytes than requested...).
* It fulfills the ASIO's `AsyncReadStream` requirement.
* It fulfills the ASIO's `AsyncWriteStream` requirement.
* It is backed by a reliable transport or session-layer "connection" with
  in-order delivery of octets (i.e. any 8-bit sequence of data).

[note This class doesn't restrict the message, method, path and reason phrase
 types. Therefore, the following members are *not* defined:

 [itemized_list
  [`message_type`]
  [`method_server_type`]
  [`path_server_type`]
  [`reason_phrase_server_type`]]]

[warning

 The API from this class is implemented in terms of composed operations. As
 such, you MUST *NOT* initiate any async read operation while there is another
 read operation in progress and you MUST *NOT* initiate any async write
 operation while there is another write operation in progress. If you cannot
 guarantee the ordering of the operations, you should use some queueing socket
 (e.g.
 [@http://sourceforge.net/p/axiomq/code/ci/master/tree/include/axiomq/basic_queue_socket.hpp
 AxioMQ's [^basic_queue_socket]]).]

[tip You cannot detect the lack of network inactivity properly under this
 layer. If you need to implement timeouts, you should do so under the lower
 layer.]

[section Template parameters]

[variablelist

[[`Socket`][The underlying communication channel type. It MUST fulfill the
 requirements for ASIO's `AsyncReadStream` and ASIO's `AsyncWriteStream`.]]

[[`N`][The internal buffer size. It defaults to
 `BOOST_HTTP_SOCKET_DEFAULT_BUFFER_SIZE`]]

]

[endsect]

[section Member types]

[variablelist

[[`typedef Socket next_layer_type`][The type of the underlying communication
 channel.]]

]

[endsect]

[section Member functions]

[variablelist

[[`basic_buffered_socket(boost::asio::io_service &io_service)`]
 [Constructor. /io_service/ is passed to the constructor from the underlying
  stream.]]

[[`template<class... Args>
   basic_buffered_socket(Args&&... args)`]
 [Constructor. /args/ are forwarded to the constructor from the underlying
  stream.]]

[[`next_layer_type &next_layer()`][Returns a reference to the underlying
 stream.]]

[[`const next_layer_type &next_layer() const`][Returns a reference to the
 underlying stream.]]

]

[section `Socket` concept]

See the [link reference.socket_concept [^Socket] concept].

[itemized_list

[`asio::io_service& get_io_service()`]

[`bool is_open() const`]

[`read_state read_state() const`]

[`write_state write_state() const`]

[`template<class Message, class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_read_some(Message &message, CompletionToken &&token)`]

[`template<class Message, class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_read_trailers(Message &message, CompletionToken &&token)`]

[`template<class Message, class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_write(const Message &message, CompletionToken &&token)`]

[`template<class Message, class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_write_trailers(const Message &message, CompletionToken &&token)`]

[`template<class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_write_end_of_message(CompletionToken &&token)`]

]

[endsect]

[section `ServerSocket` concept]

See the [link reference.server_socket_concept [^ServerSocket] concept].

[itemized_list

[`bool write_response_native_stream() const`]

[`template<class String, class Message, class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_read_request(String &method, String &path, Message &message,
                     CompletionToken &&token)`]

[`template<class StringRef, class Message, class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_write_response(std::uint_fast16_t status_code,
                       const StringRef &reason_phrase, const Message &message,
                       CompletionToken &&token)`]

[`template<class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_write_response_continue(CompletionToken &&token)`]

[`template<class StringRef, class Message, class CompletionToken>
  typename boost::asio::async_result<
      typename boost::asio::handler_type<CompletionToken,
                                  void(boost::system::error_code)>::type>::type
  async_write_response_metadata(std::uint_fast16_t status_code,
                                const StringRef &reason_phrase,
                                const Message &message,
                                CompletionToken &&token)`]

]

[endsect]

[endsect]

[endsect]
