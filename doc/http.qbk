[/ Copyright (c) 2014 Vinícius dos Santos Oliveira (vini.ipsmaker@gmail.com)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) ]

[library Boost.Http
    [quickbook 1.6]
    [copyright 2014, 2015 Vinícius dos Santos Oliveira]
    [authors [Oliveira, Vinícius]]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[:This library can be used to create applications that need to expose services
through HTTP (e.g. embeddable ReST services).]

[warning This is not an official Boost C++ library. It wasn't reviewed and can't
be downloaded from www.boost.org.
[@http://www.boost.org/community/review_schedule.html This library will be
reviewed eventually].]

Conceptually Boost.Http is a Boost.Asio socket for HTTP, which means can
leverage Boost.Asio features such as SSL and coroutines, and it integrates
seemlessly with other Boost.Asio sockets.

Among its features:

* Support for modern HTTP features.
  * Pipelining and persistent connection, where the same connection can be used
    to serve HTTP multiple requests.
  *  Chunking, where the HTTP body can be split into smaller pieces that are
     sent one by one. This is useful for building event listeners.
  * Upgrading, where the HTTP protocol can be changed into another protocol such
    as WebSockets.
  * Security, where SSL is used to encrypt the traffic.
  * [^100-continue] status.
* Lean API that unifies HTTP messages and HTTP chunking.
  * You can handle the request as soon as the metadata is available (request
    line plus header section).
  * There is only one API to acquire the request body. This API allows
    progressive downloading.
  * The response body can be be generated wholesale for normal HTTP responses,
    or be split into smaller pieces using HTTP chunking.
* Extensible asynchronous design inherited from ASIO.
  * Interaction via futures, coroutines, or callbacks.
  * Various HTTP server architectures are possible, whether multi-threaded
    servers (one thread per request, either with or without a thread-pool), one
    coroutine per request, or completely single-threaded.
  * Seamless integration with other non-HTTP ASIO services.

Boost.Http also provides a couple of special-purpose server classes:

* Lightweight standalone server.
  * The underlying socket type is customizable, so you can also use a
    [^queue_socket][footnote Useful to avoid the gotchas of ASIO composed
    operations. See [@http://sourceforge.net/p/asio/mailman/message/32259256/]
    for more information.][footnote See an example at
    [@http://sourceforge.net/p/axiomq/code/ci/master/tree/include/axiomq/basic_queue_socket.hpp].].
* Flexible static file server with support for conditional requests, partial
  download and ETag recognition.
  * You can use the default file resolver or provide one yourself.
  * You can adapt the default resolver.
  * You can add a last hook to customize the response message before the file is
    served.
  * Stateless abstractions, relying on OS capabilities to provide cache.

Boost.Http has been designed for multiple backends, such HTTP/2, and FastGCI,
which can be added in the future. You can choose between compile-time and
runtime polymorphism. Adapters are provided.

[variablelist

[[[link using Using]]
 [Requirements and installation.]]

[[[link tutorial Tutorial]]
 [Learn the basics.]]

[[[link design_choices Design choices]]
 [See the rationale for the possibly creative choices.]]

[/ [[[link examples Examples]]
 [A few examples.]] ]

[[[link reference Reference]]
 [Detailed concepts, classes and functions reference.]]

]

[include using.qbk]
[include tutorial.qbk]
[include design.qbk]
[/
[include examples.qbk]
]
[include reference.qbk]
